[
  {
    "col": 16,
    "description": "LogicalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -5,8 +5,9 @@\n // This contract provides test functions for relational operator replacement (ROR)\n contract LOR {\n     // Expect three mutants: a, b, false\n+    /// LogicalOperatorReplacement(`a && b` |==> `a`) of: `return a && b;`\n     function and(bool a, bool b) public pure returns (bool) {\n-        return a && b;\n+        return a;\n     }\n \n     // Expect three mutants: a, b, true\n",
    "id": "1",
    "line": 9,
    "name": "mutants/1/Ops/LOR/LOR.sol",
    "op": "LOR",
    "orig": "a && b",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LOR/LOR.sol",
    "repl": "a"
  },
  {
    "col": 16,
    "description": "LogicalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -5,8 +5,9 @@\n // This contract provides test functions for relational operator replacement (ROR)\n contract LOR {\n     // Expect three mutants: a, b, false\n+    /// LogicalOperatorReplacement(`a && b` |==> `b`) of: `return a && b;`\n     function and(bool a, bool b) public pure returns (bool) {\n-        return a && b;\n+        return b;\n     }\n \n     // Expect three mutants: a, b, true\n",
    "id": "2",
    "line": 9,
    "name": "mutants/2/Ops/LOR/LOR.sol",
    "op": "LOR",
    "orig": "a && b",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LOR/LOR.sol",
    "repl": "b"
  },
  {
    "col": 16,
    "description": "LogicalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -5,8 +5,9 @@\n // This contract provides test functions for relational operator replacement (ROR)\n contract LOR {\n     // Expect three mutants: a, b, false\n+    /// LogicalOperatorReplacement(`a && b` |==> `false`) of: `return a && b;`\n     function and(bool a, bool b) public pure returns (bool) {\n-        return a && b;\n+        return false;\n     }\n \n     // Expect three mutants: a, b, true\n",
    "id": "3",
    "line": 9,
    "name": "mutants/3/Ops/LOR/LOR.sol",
    "op": "LOR",
    "orig": "a && b",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LOR/LOR.sol",
    "repl": "false"
  },
  {
    "col": 16,
    "description": "LogicalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -10,8 +10,9 @@\n     }\n \n     // Expect three mutants: a, b, true\n+    /// LogicalOperatorReplacement(`a || b` |==> `a`) of: `return a || b;`\n     function or(bool a, bool b) public pure returns (bool) {\n-        return a || b;\n+        return a;\n     }\n \n     // Expect three mutants, x < y, a != (x >= y), true\n",
    "id": "4",
    "line": 14,
    "name": "mutants/4/Ops/LOR/LOR.sol",
    "op": "LOR",
    "orig": "a || b",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LOR/LOR.sol",
    "repl": "a"
  },
  {
    "col": 16,
    "description": "LogicalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -10,8 +10,9 @@\n     }\n \n     // Expect three mutants: a, b, true\n+    /// LogicalOperatorReplacement(`a || b` |==> `b`) of: `return a || b;`\n     function or(bool a, bool b) public pure returns (bool) {\n-        return a || b;\n+        return b;\n     }\n \n     // Expect three mutants, x < y, a != (x >= y), true\n",
    "id": "5",
    "line": 14,
    "name": "mutants/5/Ops/LOR/LOR.sol",
    "op": "LOR",
    "orig": "a || b",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LOR/LOR.sol",
    "repl": "b"
  },
  {
    "col": 16,
    "description": "LogicalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -10,8 +10,9 @@\n     }\n \n     // Expect three mutants: a, b, true\n+    /// LogicalOperatorReplacement(`a || b` |==> `true`) of: `return a || b;`\n     function or(bool a, bool b) public pure returns (bool) {\n-        return a || b;\n+        return true;\n     }\n \n     // Expect three mutants, x < y, a != (x >= y), true\n",
    "id": "6",
    "line": 14,
    "name": "mutants/6/Ops/LOR/LOR.sol",
    "op": "LOR",
    "orig": "a || b",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LOR/LOR.sol",
    "repl": "true"
  },
  {
    "col": 16,
    "description": "LogicalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -15,8 +15,9 @@\n     }\n \n     // Expect three mutants, x < y, a != (x >= y), true\n+    /// LogicalOperatorReplacement(`(x < y) || (a != (x >= y))` |==> `x < y`) of: `return (x < y) || (a != (x >= y));`\n     function more_or(bool a, int x, int y) public pure returns (bool) {\n-        return (x < y) || (a != (x >= y));\n+        return x < y;\n     }\n \n     function not(bool a) public pure returns (bool) {\n",
    "id": "7",
    "line": 19,
    "name": "mutants/7/Ops/LOR/LOR.sol",
    "op": "LOR",
    "orig": "(x < y) || (a != (x >= y))",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LOR/LOR.sol",
    "repl": "x < y"
  },
  {
    "col": 16,
    "description": "LogicalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -15,8 +15,9 @@\n     }\n \n     // Expect three mutants, x < y, a != (x >= y), true\n+    /// LogicalOperatorReplacement(`(x < y) || (a != (x >= y))` |==> `a != (x >= y)`) of: `return (x < y) || (a != (x >= y));`\n     function more_or(bool a, int x, int y) public pure returns (bool) {\n-        return (x < y) || (a != (x >= y));\n+        return a != (x >= y);\n     }\n \n     function not(bool a) public pure returns (bool) {\n",
    "id": "8",
    "line": 19,
    "name": "mutants/8/Ops/LOR/LOR.sol",
    "op": "LOR",
    "orig": "(x < y) || (a != (x >= y))",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LOR/LOR.sol",
    "repl": "a != (x >= y)"
  },
  {
    "col": 16,
    "description": "LogicalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -15,8 +15,9 @@\n     }\n \n     // Expect three mutants, x < y, a != (x >= y), true\n+    /// LogicalOperatorReplacement(`(x < y) || (a != (x >= y))` |==> `true`) of: `return (x < y) || (a != (x >= y));`\n     function more_or(bool a, int x, int y) public pure returns (bool) {\n-        return (x < y) || (a != (x >= y));\n+        return true;\n     }\n \n     function not(bool a) public pure returns (bool) {\n",
    "id": "9",
    "line": 19,
    "name": "mutants/9/Ops/LOR/LOR.sol",
    "op": "LOR",
    "orig": "(x < y) || (a != (x >= y))",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LOR/LOR.sol",
    "repl": "true"
  },
  {
    "col": 16,
    "description": "LogicalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -19,7 +19,8 @@\n         return (x < y) || (a != (x >= y));\n     }\n \n+    /// LogicalOperatorReplacement(`!a` |==> `true`) of: `return !a;`\n     function not(bool a) public pure returns (bool) {\n-        return !a;\n+        return true;\n     }\n }\n",
    "id": "10",
    "line": 23,
    "name": "mutants/10/Ops/LOR/LOR.sol",
    "op": "LOR",
    "orig": "!a",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LOR/LOR.sol",
    "repl": "true"
  },
  {
    "col": 16,
    "description": "LogicalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -19,7 +19,8 @@\n         return (x < y) || (a != (x >= y));\n     }\n \n+    /// LogicalOperatorReplacement(`!a` |==> `false`) of: `return !a;`\n     function not(bool a) public pure returns (bool) {\n-        return !a;\n+        return false;\n     }\n }\n",
    "id": "11",
    "line": 23,
    "name": "mutants/11/Ops/LOR/LOR.sol",
    "op": "LOR",
    "orig": "!a",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LOR/LOR.sol",
    "repl": "false"
  }
]