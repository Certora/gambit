[
  {
    "col": 9,
    "description": "StatementDeletion",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// StatementDeletion(`return a + b` |==> `assert(true)`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        assert(true);\n     }\n }\n \n",
    "id": "1",
    "line": 11,
    "name": "mutants/1/MultipleContracts/C.sol",
    "op": "STD",
    "orig": "return a + b",
    "original": "MultipleContracts/C.sol",
    "repl": "assert(true)"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `-`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a - b;\n     }\n }\n \n",
    "id": "2",
    "line": 11,
    "name": "mutants/2/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "MultipleContracts/C.sol",
    "repl": "-"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `*`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a * b;\n     }\n }\n \n",
    "id": "3",
    "line": 11,
    "name": "mutants/3/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "MultipleContracts/C.sol",
    "repl": "*"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `/`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a / b;\n     }\n }\n \n",
    "id": "4",
    "line": 11,
    "name": "mutants/4/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "MultipleContracts/C.sol",
    "repl": "/"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `%`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a % b;\n     }\n }\n \n",
    "id": "5",
    "line": 11,
    "name": "mutants/5/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "MultipleContracts/C.sol",
    "repl": "%"
  },
  {
    "col": 21,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -19,8 +19,9 @@\n         return a;\n     }\n \n+    /// LiteralValueReplacement(`10` |==> `0`) of: `uint256 a = 10;`\n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n-        uint256 a = 10;\n+        uint256 a = 0;\n         uint256 res = a ** decimals;\n         return res;\n     }\n",
    "id": "6",
    "line": 23,
    "name": "mutants/6/MultipleContracts/C.sol",
    "op": "LVR",
    "orig": "10",
    "original": "MultipleContracts/C.sol",
    "repl": "0"
  },
  {
    "col": 21,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -19,8 +19,9 @@\n         return a;\n     }\n \n+    /// LiteralValueReplacement(`10` |==> `11`) of: `uint256 a = 10;`\n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n-        uint256 a = 10;\n+        uint256 a = 11;\n         uint256 res = a ** decimals;\n         return res;\n     }\n",
    "id": "7",
    "line": 23,
    "name": "mutants/7/MultipleContracts/C.sol",
    "op": "LVR",
    "orig": "10",
    "original": "MultipleContracts/C.sol",
    "repl": "11"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `+`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a + decimals;\n         return res;\n     }\n \n",
    "id": "8",
    "line": 24,
    "name": "mutants/8/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "MultipleContracts/C.sol",
    "repl": "+"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `-`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a - decimals;\n         return res;\n     }\n \n",
    "id": "9",
    "line": 24,
    "name": "mutants/9/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "MultipleContracts/C.sol",
    "repl": "-"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `*`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a * decimals;\n         return res;\n     }\n \n",
    "id": "10",
    "line": 24,
    "name": "mutants/10/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "MultipleContracts/C.sol",
    "repl": "*"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `/`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a / decimals;\n         return res;\n     }\n \n",
    "id": "11",
    "line": 24,
    "name": "mutants/11/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "MultipleContracts/C.sol",
    "repl": "/"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `%`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a % decimals;\n         return res;\n     }\n \n",
    "id": "12",
    "line": 24,
    "name": "mutants/12/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "MultipleContracts/C.sol",
    "repl": "%"
  },
  {
    "col": 9,
    "description": "StatementDeletion",
    "diff": "--- original\n+++ mutant\n@@ -21,8 +21,9 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n+        /// StatementDeletion(`return res` |==> `assert(true)`) of: `return res;`\n         uint256 res = a ** decimals;\n-        return res;\n+        assert(true);\n     }\n \n     function getarray(address[] memory c, address e) public pure {\n",
    "id": "13",
    "line": 25,
    "name": "mutants/13/MultipleContracts/C.sol",
    "op": "STD",
    "orig": "return res",
    "original": "MultipleContracts/C.sol",
    "repl": "assert(true)"
  }
]