[
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract BinaryOpMutation {\n     function myAddition(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x + y;\n+\t/// BinaryOpMutation(`+` |==> `-`) of: `return x + y;`\n+\treturn x-y;\n     }\n \n     function mySubtraction(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "1",
    "name": "mutants/1/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract BinaryOpMutation {\n     function myAddition(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x + y;\n+\t/// BinaryOpMutation(`+` |==> `*`) of: `return x + y;`\n+\treturn x*y;\n     }\n \n     function mySubtraction(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "2",
    "name": "mutants/2/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract BinaryOpMutation {\n     function myAddition(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x + y;\n+\t/// BinaryOpMutation(`+` |==> `/`) of: `return x + y;`\n+\treturn x/y;\n     }\n \n     function mySubtraction(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "3",
    "name": "mutants/3/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract BinaryOpMutation {\n     function myAddition(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x + y;\n+\t/// BinaryOpMutation(`+` |==> `%`) of: `return x + y;`\n+\treturn x%y;\n     }\n \n     function mySubtraction(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "4",
    "name": "mutants/4/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract BinaryOpMutation {\n     function myAddition(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x + y;\n+\t/// BinaryOpMutation(`+` |==> `**`) of: `return x + y;`\n+\treturn x**y;\n     }\n \n     function mySubtraction(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "5",
    "name": "mutants/5/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n \n     function mySubtraction(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x - y;\n+\t/// BinaryOpMutation(`-` |==> `+`) of: `return x - y;`\n+\treturn x+y;\n     }\n \n     function myMultiplication(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "6",
    "name": "mutants/6/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n \n     function mySubtraction(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x - y;\n+\t/// BinaryOpMutation(`-` |==> `*`) of: `return x - y;`\n+\treturn x*y;\n     }\n \n     function myMultiplication(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "7",
    "name": "mutants/7/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n \n     function mySubtraction(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x - y;\n+\t/// BinaryOpMutation(`-` |==> `/`) of: `return x - y;`\n+\treturn x/y;\n     }\n \n     function myMultiplication(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "8",
    "name": "mutants/8/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n \n     function mySubtraction(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x - y;\n+\t/// BinaryOpMutation(`-` |==> `%`) of: `return x - y;`\n+\treturn x%y;\n     }\n \n     function myMultiplication(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "9",
    "name": "mutants/9/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n \n     function mySubtraction(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x - y;\n+\t/// BinaryOpMutation(`-` |==> `**`) of: `return x - y;`\n+\treturn x**y;\n     }\n \n     function myMultiplication(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "10",
    "name": "mutants/10/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -12,7 +12,8 @@\n     }\n \n     function myMultiplication(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x * y;\n+\t/// BinaryOpMutation(`*` |==> `+`) of: `return x * y;`\n+\treturn x+y;\n     }\n \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "11",
    "name": "mutants/11/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -12,7 +12,8 @@\n     }\n \n     function myMultiplication(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x * y;\n+\t/// BinaryOpMutation(`*` |==> `-`) of: `return x * y;`\n+\treturn x-y;\n     }\n \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "12",
    "name": "mutants/12/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -12,7 +12,8 @@\n     }\n \n     function myMultiplication(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x * y;\n+\t/// BinaryOpMutation(`*` |==> `/`) of: `return x * y;`\n+\treturn x/y;\n     }\n \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "13",
    "name": "mutants/13/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -12,7 +12,8 @@\n     }\n \n     function myMultiplication(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x * y;\n+\t/// BinaryOpMutation(`*` |==> `%`) of: `return x * y;`\n+\treturn x%y;\n     }\n \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "14",
    "name": "mutants/14/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -12,7 +12,8 @@\n     }\n \n     function myMultiplication(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x * y;\n+\t/// BinaryOpMutation(`*` |==> `**`) of: `return x * y;`\n+\treturn x**y;\n     }\n \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "15",
    "name": "mutants/15/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -16,7 +16,8 @@\n     }\n \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x / y;\n+\t/// BinaryOpMutation(`/` |==> `+`) of: `return x / y;`\n+\treturn x+y;\n     }\n \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "16",
    "name": "mutants/16/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -16,7 +16,8 @@\n     }\n \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x / y;\n+\t/// BinaryOpMutation(`/` |==> `-`) of: `return x / y;`\n+\treturn x-y;\n     }\n \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "17",
    "name": "mutants/17/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -16,7 +16,8 @@\n     }\n \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x / y;\n+\t/// BinaryOpMutation(`/` |==> `*`) of: `return x / y;`\n+\treturn x*y;\n     }\n \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "18",
    "name": "mutants/18/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -16,7 +16,8 @@\n     }\n \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x / y;\n+\t/// BinaryOpMutation(`/` |==> `%`) of: `return x / y;`\n+\treturn x%y;\n     }\n \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "19",
    "name": "mutants/19/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -16,7 +16,8 @@\n     }\n \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x / y;\n+\t/// BinaryOpMutation(`/` |==> `**`) of: `return x / y;`\n+\treturn x**y;\n     }\n \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "20",
    "name": "mutants/20/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -20,7 +20,8 @@\n     }\n \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x % y;\n+\t/// BinaryOpMutation(`%` |==> `+`) of: `return x % y;`\n+\treturn x+y;\n     }\n \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "21",
    "name": "mutants/21/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -20,7 +20,8 @@\n     }\n \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x % y;\n+\t/// BinaryOpMutation(`%` |==> `-`) of: `return x % y;`\n+\treturn x-y;\n     }\n \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "22",
    "name": "mutants/22/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -20,7 +20,8 @@\n     }\n \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x % y;\n+\t/// BinaryOpMutation(`%` |==> `*`) of: `return x % y;`\n+\treturn x*y;\n     }\n \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "23",
    "name": "mutants/23/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -20,7 +20,8 @@\n     }\n \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x % y;\n+\t/// BinaryOpMutation(`%` |==> `/`) of: `return x % y;`\n+\treturn x/y;\n     }\n \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "24",
    "name": "mutants/24/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -20,7 +20,8 @@\n     }\n \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x % y;\n+\t/// BinaryOpMutation(`%` |==> `**`) of: `return x % y;`\n+\treturn x**y;\n     }\n \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "25",
    "name": "mutants/25/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -24,7 +24,8 @@\n     }\n \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x ** y;\n+\t/// BinaryOpMutation(`**` |==> `+`) of: `return x ** y;`\n+\treturn x+y;\n     }\n \n }\n",
    "id": "26",
    "name": "mutants/26/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -24,7 +24,8 @@\n     }\n \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x ** y;\n+\t/// BinaryOpMutation(`**` |==> `-`) of: `return x ** y;`\n+\treturn x-y;\n     }\n \n }\n",
    "id": "27",
    "name": "mutants/27/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -24,7 +24,8 @@\n     }\n \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x ** y;\n+\t/// BinaryOpMutation(`**` |==> `*`) of: `return x ** y;`\n+\treturn x*y;\n     }\n \n }\n",
    "id": "28",
    "name": "mutants/28/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -24,7 +24,8 @@\n     }\n \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x ** y;\n+\t/// BinaryOpMutation(`**` |==> `/`) of: `return x ** y;`\n+\treturn x/y;\n     }\n \n }\n",
    "id": "29",
    "name": "mutants/29/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -24,7 +24,8 @@\n     }\n \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x ** y;\n+\t/// BinaryOpMutation(`**` |==> `%`) of: `return x ** y;`\n+\treturn x%y;\n     }\n \n }\n",
    "id": "30",
    "name": "mutants/30/BinaryOpMutation/BinaryOpMutation.sol",
    "original": "BinaryOpMutation/BinaryOpMutation.sol",
  },
  {
    "description": "RequireMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract RequireMutation {\n     function myRequires(bool cond1, bool cond2, bool cond3) public pure returns (bool) {\n-\trequire(cond1);\n+\t/// RequireMutation(`cond1` |==> `true`) of: `require(cond1);`\n+\trequire(true);\n \trequire(cond2);\n \trequire(cond3);\n \treturn true;\n",
    "id": "31",
    "name": "mutants/31/RequireMutation/RequireMutation.sol",
    "original": "RequireMutation/RequireMutation.sol",
  },
  {
    "description": "RequireMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract RequireMutation {\n     function myRequires(bool cond1, bool cond2, bool cond3) public pure returns (bool) {\n-\trequire(cond1);\n+\t/// RequireMutation(`cond1` |==> `false`) of: `require(cond1);`\n+\trequire(false);\n \trequire(cond2);\n \trequire(cond3);\n \treturn true;\n",
    "id": "32",
    "name": "mutants/32/RequireMutation/RequireMutation.sol",
    "original": "RequireMutation/RequireMutation.sol",
  },
  {
    "description": "RequireMutation",
    "diff": "--- original\n+++ mutant\n@@ -5,7 +5,8 @@\n contract RequireMutation {\n     function myRequires(bool cond1, bool cond2, bool cond3) public pure returns (bool) {\n \trequire(cond1);\n-\trequire(cond2);\n+\t/// RequireMutation(`cond2` |==> `true`) of: `require(cond2);`\n+\trequire(true);\n \trequire(cond3);\n \treturn true;\n     }\n",
    "id": "33",
    "name": "mutants/33/RequireMutation/RequireMutation.sol",
    "original": "RequireMutation/RequireMutation.sol",
  },
  {
    "description": "RequireMutation",
    "diff": "--- original\n+++ mutant\n@@ -5,7 +5,8 @@\n contract RequireMutation {\n     function myRequires(bool cond1, bool cond2, bool cond3) public pure returns (bool) {\n \trequire(cond1);\n-\trequire(cond2);\n+\t/// RequireMutation(`cond2` |==> `false`) of: `require(cond2);`\n+\trequire(false);\n \trequire(cond3);\n \treturn true;\n     }\n",
    "id": "34",
    "name": "mutants/34/RequireMutation/RequireMutation.sol",
    "original": "RequireMutation/RequireMutation.sol",
  },
  {
    "description": "RequireMutation",
    "diff": "--- original\n+++ mutant\n@@ -6,7 +6,8 @@\n     function myRequires(bool cond1, bool cond2, bool cond3) public pure returns (bool) {\n \trequire(cond1);\n \trequire(cond2);\n-\trequire(cond3);\n+\t/// RequireMutation(`cond3` |==> `true`) of: `require(cond3);`\n+\trequire(true);\n \treturn true;\n     }\n }\n",
    "id": "35",
    "name": "mutants/35/RequireMutation/RequireMutation.sol",
    "original": "RequireMutation/RequireMutation.sol",
  },
  {
    "description": "RequireMutation",
    "diff": "--- original\n+++ mutant\n@@ -6,7 +6,8 @@\n     function myRequires(bool cond1, bool cond2, bool cond3) public pure returns (bool) {\n \trequire(cond1);\n \trequire(cond2);\n-\trequire(cond3);\n+\t/// RequireMutation(`cond3` |==> `false`) of: `require(cond3);`\n+\trequire(false);\n \treturn true;\n     }\n }\n",
    "id": "36",
    "name": "mutants/36/RequireMutation/RequireMutation.sol",
    "original": "RequireMutation/RequireMutation.sol",
  },
  {
    "description": "AssignmentMutation",
    "diff": "--- original\n+++ mutant\n@@ -10,7 +10,8 @@\n     bool public b;\n \n     constructor() {\n-\tx = 42; // original: 42\n+\t/// AssignmentMutation(`42` |==> `0`) of: `x = 42; // original: 42`\n+\tx = 0; // original: 42\n \ty = 13; // original: 13\n \tz = 3110; // original: 3110\n \ta = true; // original: true\n",
    "id": "37",
    "name": "mutants/37/AssignmentMutation/AssignmentMutation.sol",
    "original": "AssignmentMutation/AssignmentMutation.sol",
  },
  {
    "description": "AssignmentMutation",
    "diff": "--- original\n+++ mutant\n@@ -10,7 +10,8 @@\n     bool public b;\n \n     constructor() {\n-\tx = 42; // original: 42\n+\t/// AssignmentMutation(`42` |==> `1`) of: `x = 42; // original: 42`\n+\tx = 1; // original: 42\n \ty = 13; // original: 13\n \tz = 3110; // original: 3110\n \ta = true; // original: true\n",
    "id": "38",
    "name": "mutants/38/AssignmentMutation/AssignmentMutation.sol",
    "original": "AssignmentMutation/AssignmentMutation.sol",
  },
  {
    "description": "AssignmentMutation",
    "diff": "--- original\n+++ mutant\n@@ -11,7 +11,8 @@\n \n     constructor() {\n \tx = 42; // original: 42\n-\ty = 13; // original: 13\n+\t/// AssignmentMutation(`13` |==> `0`) of: `y = 13; // original: 13`\n+\ty = 0; // original: 13\n \tz = 3110; // original: 3110\n \ta = true; // original: true\n \tb = false; // original: false\n",
    "id": "39",
    "name": "mutants/39/AssignmentMutation/AssignmentMutation.sol",
    "original": "AssignmentMutation/AssignmentMutation.sol",
  },
  {
    "description": "AssignmentMutation",
    "diff": "--- original\n+++ mutant\n@@ -11,7 +11,8 @@\n \n     constructor() {\n \tx = 42; // original: 42\n-\ty = 13; // original: 13\n+\t/// AssignmentMutation(`13` |==> `1`) of: `y = 13; // original: 13`\n+\ty = 1; // original: 13\n \tz = 3110; // original: 3110\n \ta = true; // original: true\n \tb = false; // original: false\n",
    "id": "40",
    "name": "mutants/40/AssignmentMutation/AssignmentMutation.sol",
    "original": "AssignmentMutation/AssignmentMutation.sol",
  },
  {
    "description": "AssignmentMutation",
    "diff": "--- original\n+++ mutant\n@@ -12,7 +12,8 @@\n     constructor() {\n \tx = 42; // original: 42\n \ty = 13; // original: 13\n-\tz = 3110; // original: 3110\n+\t/// AssignmentMutation(`3110` |==> `0`) of: `z = 3110; // original: 3110`\n+\tz = 0; // original: 3110\n \ta = true; // original: true\n \tb = false; // original: false\n     }\n",
    "id": "41",
    "name": "mutants/41/AssignmentMutation/AssignmentMutation.sol",
    "original": "AssignmentMutation/AssignmentMutation.sol",
  },
  {
    "description": "AssignmentMutation",
    "diff": "--- original\n+++ mutant\n@@ -12,7 +12,8 @@\n     constructor() {\n \tx = 42; // original: 42\n \ty = 13; // original: 13\n-\tz = 3110; // original: 3110\n+\t/// AssignmentMutation(`3110` |==> `1`) of: `z = 3110; // original: 3110`\n+\tz = 1; // original: 3110\n \ta = true; // original: true\n \tb = false; // original: false\n     }\n",
    "id": "42",
    "name": "mutants/42/AssignmentMutation/AssignmentMutation.sol",
    "original": "AssignmentMutation/AssignmentMutation.sol",
  },
  {
    "description": "AssignmentMutation",
    "diff": "--- original\n+++ mutant\n@@ -13,7 +13,8 @@\n \tx = 42; // original: 42\n \ty = 13; // original: 13\n \tz = 3110; // original: 3110\n-\ta = true; // original: true\n+\t/// AssignmentMutation(`true` |==> `false`) of: `a = true; // original: true`\n+\ta = false; // original: true\n \tb = false; // original: false\n     }\n }\n",
    "id": "43",
    "name": "mutants/43/AssignmentMutation/AssignmentMutation.sol",
    "original": "AssignmentMutation/AssignmentMutation.sol",
  },
  {
    "description": "AssignmentMutation",
    "diff": "--- original\n+++ mutant\n@@ -14,6 +14,7 @@\n \ty = 13; // original: 13\n \tz = 3110; // original: 3110\n \ta = true; // original: true\n-\tb = false; // original: false\n+\t/// AssignmentMutation(`false` |==> `true`) of: `b = false; // original: false`\n+\tb = true; // original: false\n     }\n }\n",
    "id": "44",
    "name": "mutants/44/AssignmentMutation/AssignmentMutation.sol",
    "original": "AssignmentMutation/AssignmentMutation.sol",
  },
  {
    "description": "DeleteExpressionMutation",
    "diff": "--- original\n+++ mutant\n@@ -6,7 +6,8 @@\n \n     function myIdentity(uint256 x) public pure returns (uint256) {\n \tuint256 result = 0;\n-\tfor (uint256 i = 0; i < x; i++) {\n+\t/// DeleteExpressionMutation(`i++` |==> `/* i++ */`) of: `for (uint256 i = 0; i < x; i++) {`\n+\tfor (uint256 i = 0; i < x; /* i++ */) {\n \t    result ++;\n \t}\n \treturn result;\n",
    "id": "45",
    "name": "mutants/45/DeleteExpressionMutation/DeleteExpressionMutation.sol",
    "original": "DeleteExpressionMutation/DeleteExpressionMutation.sol",
  },
  {
    "description": "IfStatementMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract IfStatementMutation {\n     function myBooleanNegation(bool a) public pure returns (bool) {\n-\tif (a) {\n+\t/// IfStatementMutation(`a` |==> `true`) of: `if (a) {`\n+\tif (true) {\n \t    return true;\n \t}\n \telse {\n",
    "id": "46",
    "name": "mutants/46/IfStatementMutation/IfStatementMutation.sol",
    "original": "IfStatementMutation/IfStatementMutation.sol",
  },
  {
    "description": "IfStatementMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract IfStatementMutation {\n     function myBooleanNegation(bool a) public pure returns (bool) {\n-\tif (a) {\n+\t/// IfStatementMutation(`a` |==> `false`) of: `if (a) {`\n+\tif (false) {\n \t    return true;\n \t}\n \telse {\n",
    "id": "47",
    "name": "mutants/47/IfStatementMutation/IfStatementMutation.sol",
    "original": "IfStatementMutation/IfStatementMutation.sol",
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract SwapArgumentsOperatorMutation {\n     function mySubtraction(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x - y;\n+\t/// SwapArgumentsOperatorMutation(`x - y` |==> `y - x`) of: `return x - y;`\n+\treturn y - x;\n     }\n     \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "48",
    "name": "mutants/48/SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
    "original": "SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n     \n     function myDivision(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x / y;\n+\t/// SwapArgumentsOperatorMutation(`x / y` |==> `y / x`) of: `return x / y;`\n+\treturn y / x;\n     }\n     \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "49",
    "name": "mutants/49/SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
    "original": "SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -12,7 +12,8 @@\n     }\n     \n     function myModulo(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x % y;\n+\t/// SwapArgumentsOperatorMutation(`x % y` |==> `y % x`) of: `return x % y;`\n+\treturn y % x;\n     }\n     \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "50",
    "name": "mutants/50/SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
    "original": "SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -16,7 +16,8 @@\n     }\n     \n     function myExponentiation(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x ** y;\n+\t/// SwapArgumentsOperatorMutation(`x ** y` |==> `y ** x`) of: `return x ** y;`\n+\treturn y ** x;\n     }\n     \n     function myGT(uint256 x, uint256 y) public pure returns (bool) {\n",
    "id": "51",
    "name": "mutants/51/SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
    "original": "SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -20,7 +20,8 @@\n     }\n     \n     function myGT(uint256 x, uint256 y) public pure returns (bool) {\n-\treturn x > y;\n+\t/// SwapArgumentsOperatorMutation(`x > y` |==> `y > x`) of: `return x > y;`\n+\treturn y > x;\n     }\n     \n     function myLT(uint256 x, uint256 y) public pure returns (bool) {\n",
    "id": "52",
    "name": "mutants/52/SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
    "original": "SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -24,7 +24,8 @@\n     }\n     \n     function myLT(uint256 x, uint256 y) public pure returns (bool) {\n-\treturn x < y;\n+\t/// SwapArgumentsOperatorMutation(`x < y` |==> `y < x`) of: `return x < y;`\n+\treturn y < x;\n     }\n     \n     function myGE(uint256 x, uint256 y) public pure returns (bool) {\n",
    "id": "53",
    "name": "mutants/53/SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
    "original": "SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -28,7 +28,8 @@\n     }\n     \n     function myGE(uint256 x, uint256 y) public pure returns (bool) {\n-\treturn x >= y;\n+\t/// SwapArgumentsOperatorMutation(`x >= y` |==> `y >= x`) of: `return x >= y;`\n+\treturn y >= x;\n     }\n     \n     function myLE(uint256 x, uint256 y) public pure returns (bool) {\n",
    "id": "54",
    "name": "mutants/54/SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
    "original": "SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -32,7 +32,8 @@\n     }\n     \n     function myLE(uint256 x, uint256 y) public pure returns (bool) {\n-\treturn x <= y;\n+\t/// SwapArgumentsOperatorMutation(`x <= y` |==> `y <= x`) of: `return x <= y;`\n+\treturn y <= x;\n     }\n \n     function mySAL(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "55",
    "name": "mutants/55/SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
    "original": "SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -36,7 +36,8 @@\n     }\n \n     function mySAL(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x << y;\n+\t/// SwapArgumentsOperatorMutation(`x << y` |==> `y << x`) of: `return x << y;`\n+\treturn y << x;\n     }\n \n     function mySAR(uint256 x, uint256 y) public pure returns (uint256) {\n",
    "id": "56",
    "name": "mutants/56/SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
    "original": "SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -40,6 +40,7 @@\n     }\n \n     function mySAR(uint256 x, uint256 y) public pure returns (uint256) {\n-\treturn x >> y;\n+\t/// SwapArgumentsOperatorMutation(`x >> y` |==> `y >> x`) of: `return x >> y;`\n+\treturn y >> x;\n     }\n }\n",
    "id": "57",
    "name": "mutants/57/SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
    "original": "SwapArgumentsOperatorMutation/SwapArgumentsOperatorMutation.sol",
  },
  {
    "description": "UnaryOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract UnaryOperatorMutation {\n     function myBitwiseNeg(uint256 x) public pure returns (uint256) {\n-\treturn ~ x;\n+\t/// UnaryOperatorMutation(`~` |==> `++`) of: `return ~ x;`\n+\treturn ++ x;\n     }\n \n     function myPrefixIncr(uint256 x) public pure returns (uint256) {\n",
    "id": "58",
    "name": "mutants/58/UnaryOperatorMutation/UnaryOperatorMutation.sol",
    "original": "UnaryOperatorMutation/UnaryOperatorMutation.sol",
  },
  {
    "description": "UnaryOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n contract UnaryOperatorMutation {\n     function myBitwiseNeg(uint256 x) public pure returns (uint256) {\n-\treturn ~ x;\n+\t/// UnaryOperatorMutation(`~` |==> `--`) of: `return ~ x;`\n+\treturn -- x;\n     }\n \n     function myPrefixIncr(uint256 x) public pure returns (uint256) {\n",
    "id": "59",
    "name": "mutants/59/UnaryOperatorMutation/UnaryOperatorMutation.sol",
    "original": "UnaryOperatorMutation/UnaryOperatorMutation.sol",
  },
  {
    "description": "UnaryOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n \n     function myPrefixIncr(uint256 x) public pure returns (uint256) {\n-\treturn ++x;\n+\t/// UnaryOperatorMutation(`++` |==> `--`) of: `return ++x;`\n+\treturn --x;\n     }\n \n     function myPrefixDecr(uint256 x) public pure returns (uint256) {\n",
    "id": "60",
    "name": "mutants/60/UnaryOperatorMutation/UnaryOperatorMutation.sol",
    "original": "UnaryOperatorMutation/UnaryOperatorMutation.sol",
  },
  {
    "description": "UnaryOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n \n     function myPrefixIncr(uint256 x) public pure returns (uint256) {\n-\treturn ++x;\n+\t/// UnaryOperatorMutation(`++` |==> `~`) of: `return ++x;`\n+\treturn ~x;\n     }\n \n     function myPrefixDecr(uint256 x) public pure returns (uint256) {\n",
    "id": "61",
    "name": "mutants/61/UnaryOperatorMutation/UnaryOperatorMutation.sol",
    "original": "UnaryOperatorMutation/UnaryOperatorMutation.sol",
  },
  {
    "description": "UnaryOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -12,7 +12,8 @@\n     }\n \n     function myPrefixDecr(uint256 x) public pure returns (uint256) {\n-\treturn --x;\n+\t/// UnaryOperatorMutation(`--` |==> `++`) of: `return --x;`\n+\treturn ++x;\n     }\n \n     function mySuffixIncr(uint256 x) public pure returns (uint256) {\n",
    "id": "62",
    "name": "mutants/62/UnaryOperatorMutation/UnaryOperatorMutation.sol",
    "original": "UnaryOperatorMutation/UnaryOperatorMutation.sol",
  },
  {
    "description": "UnaryOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -12,7 +12,8 @@\n     }\n \n     function myPrefixDecr(uint256 x) public pure returns (uint256) {\n-\treturn --x;\n+\t/// UnaryOperatorMutation(`--` |==> `~`) of: `return --x;`\n+\treturn ~x;\n     }\n \n     function mySuffixIncr(uint256 x) public pure returns (uint256) {\n",
    "id": "63",
    "name": "mutants/63/UnaryOperatorMutation/UnaryOperatorMutation.sol",
    "original": "UnaryOperatorMutation/UnaryOperatorMutation.sol",
  },
  {
    "description": "UnaryOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -16,7 +16,8 @@\n     }\n \n     function mySuffixIncr(uint256 x) public pure returns (uint256) {\n-\tx++;\n+\t/// UnaryOperatorMutation(`++` |==> `--`) of: `x++;`\n+\tx--;\n \treturn x;\n     }\n \n",
    "id": "64",
    "name": "mutants/64/UnaryOperatorMutation/UnaryOperatorMutation.sol",
    "original": "UnaryOperatorMutation/UnaryOperatorMutation.sol",
  },
  {
    "description": "UnaryOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n     }\n \n     function mySuffixDecr(uint256 x) public pure returns (uint256) {\n-\tx--;\n+\t/// UnaryOperatorMutation(`--` |==> `++`) of: `x--;`\n+\tx++;\n \treturn x;\n     }\n }\n",
    "id": "65",
    "name": "mutants/65/UnaryOperatorMutation/UnaryOperatorMutation.sol",
    "original": "UnaryOperatorMutation/UnaryOperatorMutation.sol",
  },
  {
    "description": "ElimDelegateMutation",
    "diff": "--- original\n+++ mutant\n@@ -22,7 +22,8 @@\n     \n \n     function setVars(address _contract, uint _num) public payable {\n-        (bool success, bytes memory data) = _contract.delegatecall(\n+        /// ElimDelegateMutation(`delegatecall` |==> `call`) of: `(bool success, bytes memory data) = _contract.delegatecall(`\n+        (bool success, bytes memory data) = _contract.call(\n             abi.encodeWithSignature(\"setVars(uint256)\", _num)\n         );\n \tdelegateSuccessful = success;\n",
    "id": "66",
    "name": "mutants/66/ElimDelegateMutation/ElimDelegateMutation.sol",
    "original": "ElimDelegateMutation/ElimDelegateMutation.sol",
  }
]