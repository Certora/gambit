[
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// BinaryOpMutation(`**` |==> `+`) of: `uint256 res = a ** decimals;`\n+        uint256 res = a+decimals;\n         return res;\n     }\n \n",
    "id": "1",
    "name": "mutants/1/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
    "sourceroot": "/Users/benku/Gambit/benchmarks"
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// BinaryOpMutation(`**` |==> `-`) of: `uint256 res = a ** decimals;`\n+        uint256 res = a-decimals;\n         return res;\n     }\n \n",
    "id": "2",
    "name": "mutants/2/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
    "sourceroot": "/Users/benku/Gambit/benchmarks"
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// BinaryOpMutation(`**` |==> `*`) of: `uint256 res = a ** decimals;`\n+        uint256 res = a*decimals;\n         return res;\n     }\n \n",
    "id": "3",
    "name": "mutants/3/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
    "sourceroot": "/Users/benku/Gambit/benchmarks"
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// BinaryOpMutation(`**` |==> `/`) of: `uint256 res = a ** decimals;`\n+        uint256 res = a/decimals;\n         return res;\n     }\n \n",
    "id": "4",
    "name": "mutants/4/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
    "sourceroot": "/Users/benku/Gambit/benchmarks"
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// BinaryOpMutation(`**` |==> `%`) of: `uint256 res = a ** decimals;`\n+        uint256 res = a%decimals;\n         return res;\n     }\n \n",
    "id": "5",
    "name": "mutants/5/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
    "sourceroot": "/Users/benku/Gambit/benchmarks"
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// SwapArgumentsOperatorMutation(`a ** decimals` |==> `decimals ** a`) of: `uint256 res = a ** decimals;`\n+        uint256 res = decimals ** a;\n         return res;\n     }\n \n",
    "id": "6",
    "name": "mutants/6/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
    "sourceroot": "/Users/benku/Gambit/benchmarks"
  }
]