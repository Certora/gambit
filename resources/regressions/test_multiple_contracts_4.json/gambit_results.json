[
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `-`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a - b;\n     }\n }\n \n",
    "id": "1",
    "line": 11,
    "name": "mutants/1/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "-"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `*`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a * b;\n     }\n }\n \n",
    "id": "2",
    "line": 11,
    "name": "mutants/2/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "*"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `/`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a / b;\n     }\n }\n \n",
    "id": "3",
    "line": 11,
    "name": "mutants/3/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "/"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `%`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a % b;\n     }\n }\n \n",
    "id": "4",
    "line": 11,
    "name": "mutants/4/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "%"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `+`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a + decimals;\n         return res;\n     }\n \n",
    "id": "5",
    "line": 24,
    "name": "mutants/5/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "+"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `-`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a - decimals;\n         return res;\n     }\n \n",
    "id": "6",
    "line": 24,
    "name": "mutants/6/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "-"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `*`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a * decimals;\n         return res;\n     }\n \n",
    "id": "7",
    "line": 24,
    "name": "mutants/7/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "*"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `/`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a / decimals;\n         return res;\n     }\n \n",
    "id": "8",
    "line": 24,
    "name": "mutants/8/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "/"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `%`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a % decimals;\n         return res;\n     }\n \n",
    "id": "9",
    "line": 24,
    "name": "mutants/9/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "%"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -34,7 +34,8 @@\n         Utils.getarray(b, address(this));\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `-`) of: `return c + d;`\n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        return c - d;\n     }\n }\n",
    "id": "10",
    "line": 38,
    "name": "mutants/10/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "-"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -34,7 +34,8 @@\n         Utils.getarray(b, address(this));\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `*`) of: `return c + d;`\n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        return c * d;\n     }\n }\n",
    "id": "11",
    "line": 38,
    "name": "mutants/11/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "*"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -34,7 +34,8 @@\n         Utils.getarray(b, address(this));\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `/`) of: `return c + d;`\n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        return c / d;\n     }\n }\n",
    "id": "12",
    "line": 38,
    "name": "mutants/12/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "/"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -34,7 +34,8 @@\n         Utils.getarray(b, address(this));\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `%`) of: `return c + d;`\n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        return c % d;\n     }\n }\n",
    "id": "13",
    "line": 38,
    "name": "mutants/13/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "%"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `-`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a - b;\n     }\n }\n \n",
    "id": "14",
    "line": 11,
    "name": "mutants/14/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "-"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `*`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a * b;\n     }\n }\n \n",
    "id": "15",
    "line": 11,
    "name": "mutants/15/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "*"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `/`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a / b;\n     }\n }\n \n",
    "id": "16",
    "line": 11,
    "name": "mutants/16/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "/"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -7,8 +7,9 @@\n         assert(c[0] == e);\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `%`) of: `return a + b;`\n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        return a % b;\n     }\n }\n \n",
    "id": "17",
    "line": 11,
    "name": "mutants/17/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "%"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `+`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a + decimals;\n         return res;\n     }\n \n",
    "id": "18",
    "line": 24,
    "name": "mutants/18/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "+"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `-`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a - decimals;\n         return res;\n     }\n \n",
    "id": "19",
    "line": 24,
    "name": "mutants/19/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "-"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `*`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a * decimals;\n         return res;\n     }\n \n",
    "id": "20",
    "line": 24,
    "name": "mutants/20/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "*"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `/`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a / decimals;\n         return res;\n     }\n \n",
    "id": "21",
    "line": 24,
    "name": "mutants/21/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "/"
  },
  {
    "col": 25,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n+        /// ArithmeticOperatorReplacement(`**` |==> `%`) of: `uint256 res = a ** decimals;`\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        uint256 res = a % decimals;\n         return res;\n     }\n \n",
    "id": "22",
    "line": 24,
    "name": "mutants/22/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "**",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "%"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -34,7 +34,8 @@\n         Utils.getarray(b, address(this));\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `-`) of: `return c + d;`\n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        return c - d;\n     }\n }\n",
    "id": "23",
    "line": 38,
    "name": "mutants/23/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "-"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -34,7 +34,8 @@\n         Utils.getarray(b, address(this));\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `*`) of: `return c + d;`\n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        return c * d;\n     }\n }\n",
    "id": "24",
    "line": 38,
    "name": "mutants/24/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "*"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -34,7 +34,8 @@\n         Utils.getarray(b, address(this));\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `/`) of: `return c + d;`\n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        return c / d;\n     }\n }\n",
    "id": "25",
    "line": 38,
    "name": "mutants/25/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "/"
  },
  {
    "col": 18,
    "description": "ArithmeticOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -34,7 +34,8 @@\n         Utils.getarray(b, address(this));\n     }\n \n+    /// ArithmeticOperatorReplacement(`+` |==> `%`) of: `return c + d;`\n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        return c % d;\n     }\n }\n",
    "id": "26",
    "line": 38,
    "name": "mutants/26/MultipleContracts/C.sol",
    "op": "AOR",
    "orig": "+",
    "original": "/Users/benku/Gambit/benchmarks/MultipleContracts/C.sol",
    "repl": "%"
  }
]