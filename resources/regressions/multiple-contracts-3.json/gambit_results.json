[
  {
    "description": "DeleteExpressionMutation",
    "diff": "--- original\n+++ mutant\n@@ -4,7 +4,8 @@\n \n library Utils {\n     function getarray(address[] memory c, address e) internal pure {\n-        assert(c[0] == e);\n+        /// DeleteExpressionMutation(`assert(c[0] == e)` |==> `assert(true)`) of: `assert(c[0] == e);`\n+        assert(true);\n     }\n \n     function add(int8 a, int8 b) public pure returns (int8) {\n",
    "id": "1",
    "name": "mutants/1/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n \n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        /// BinaryOpMutation(`+` |==> `-`) of: `return a + b;`\n+        return a-b;\n     }\n }\n \n",
    "id": "2",
    "name": "mutants/2/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n \n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        /// BinaryOpMutation(`+` |==> `*`) of: `return a + b;`\n+        return a*b;\n     }\n }\n \n",
    "id": "3",
    "name": "mutants/3/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n \n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        /// BinaryOpMutation(`+` |==> `/`) of: `return a + b;`\n+        return a/b;\n     }\n }\n \n",
    "id": "4",
    "name": "mutants/4/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -8,7 +8,8 @@\n     }\n \n     function add(int8 a, int8 b) public pure returns (int8) {\n-        return a + b;\n+        /// BinaryOpMutation(`+` |==> `%`) of: `return a + b;`\n+        return a%b;\n     }\n }\n \n",
    "id": "5",
    "name": "mutants/5/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "DeleteExpressionMutation",
    "diff": "--- original\n+++ mutant\n@@ -15,7 +15,8 @@\n contract C {\n     function foo() external view returns (address[] memory) {\n         address[] memory a = new address[](1);\n-        a[0] = msg.sender;\n+        /// DeleteExpressionMutation(`a[0] = msg.sender` |==> `assert(true)`) of: `a[0] = msg.sender;`\n+        assert(true);\n         return a;\n     }\n \n",
    "id": "6",
    "name": "mutants/6/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// BinaryOpMutation(`**` |==> `+`) of: `uint256 res = a ** decimals;`\n+        uint256 res = a+decimals;\n         return res;\n     }\n \n",
    "id": "7",
    "name": "mutants/7/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// BinaryOpMutation(`**` |==> `-`) of: `uint256 res = a ** decimals;`\n+        uint256 res = a-decimals;\n         return res;\n     }\n \n",
    "id": "8",
    "name": "mutants/8/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// BinaryOpMutation(`**` |==> `*`) of: `uint256 res = a ** decimals;`\n+        uint256 res = a*decimals;\n         return res;\n     }\n \n",
    "id": "9",
    "name": "mutants/9/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// BinaryOpMutation(`**` |==> `/`) of: `uint256 res = a ** decimals;`\n+        uint256 res = a/decimals;\n         return res;\n     }\n \n",
    "id": "10",
    "name": "mutants/10/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// BinaryOpMutation(`**` |==> `%`) of: `uint256 res = a ** decimals;`\n+        uint256 res = a%decimals;\n         return res;\n     }\n \n",
    "id": "11",
    "name": "mutants/11/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "SwapArgumentsOperatorMutation",
    "diff": "--- original\n+++ mutant\n@@ -21,7 +21,8 @@\n \n     function get10PowerDecimals(uint8 decimals) public pure returns (uint256) {\n         uint256 a = 10;\n-        uint256 res = a ** decimals;\n+        /// SwapArgumentsOperatorMutation(`a ** decimals` |==> `decimals ** a`) of: `uint256 res = a ** decimals;`\n+        uint256 res = decimals ** a;\n         return res;\n     }\n \n",
    "id": "12",
    "name": "mutants/12/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "DeleteExpressionMutation",
    "diff": "--- original\n+++ mutant\n@@ -26,7 +26,8 @@\n     }\n \n     function getarray(address[] memory c, address e) public pure {\n-        assert(c[0] == e);\n+        /// DeleteExpressionMutation(`assert(c[0] == e)` |==> `assert(true)`) of: `assert(c[0] == e);`\n+        assert(true);\n     }\n \n     function callmyself() external view {\n",
    "id": "13",
    "name": "mutants/13/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "DeleteExpressionMutation",
    "diff": "--- original\n+++ mutant\n@@ -31,7 +31,8 @@\n \n     function callmyself() external view {\n         address[] memory b = this.foo();\n-        Utils.getarray(b, address(this));\n+        /// DeleteExpressionMutation(`Utils.getarray(b, address(this))` |==> `assert(true)`) of: `Utils.getarray(b, address(this));`\n+        assert(true);\n     }\n \n     function add(int8 c, int8 d) public pure returns (int8) {\n",
    "id": "14",
    "name": "mutants/14/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -35,6 +35,7 @@\n     }\n \n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        /// BinaryOpMutation(`+` |==> `-`) of: `return c + d;`\n+        return c-d;\n     }\n }\n",
    "id": "15",
    "name": "mutants/15/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -35,6 +35,7 @@\n     }\n \n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        /// BinaryOpMutation(`+` |==> `*`) of: `return c + d;`\n+        return c*d;\n     }\n }\n",
    "id": "16",
    "name": "mutants/16/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -35,6 +35,7 @@\n     }\n \n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        /// BinaryOpMutation(`+` |==> `/`) of: `return c + d;`\n+        return c/d;\n     }\n }\n",
    "id": "17",
    "name": "mutants/17/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  },
  {
    "description": "BinaryOpMutation",
    "diff": "--- original\n+++ mutant\n@@ -35,6 +35,7 @@\n     }\n \n     function add(int8 c, int8 d) public pure returns (int8) {\n-        return c + d;\n+        /// BinaryOpMutation(`+` |==> `%`) of: `return c + d;`\n+        return c%d;\n     }\n }\n",
    "id": "18",
    "name": "mutants/18/MultipleContracts/C.sol",
    "original": "MultipleContracts/C.sol",
  }
]