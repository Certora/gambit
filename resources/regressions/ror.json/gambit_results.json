[
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -5,8 +5,9 @@\n // This contract provides test functions for relational operator replacement (ROR)\n contract ROR {\n     // Expect 3 mutants: x <= y, x != y, false\n+    /// RelationalOperatorReplacement(`<` |==> `<=`) of: `return x < y;`\n     function less(uint256 x, uint256 y) public pure returns (bool) {\n-        return x < y;\n+        return x <= y;\n     }\n \n     // Expect 3 mutants: x < y, x == y, true\n",
    "id": "1",
    "name": "mutants/1/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -5,8 +5,9 @@\n // This contract provides test functions for relational operator replacement (ROR)\n contract ROR {\n     // Expect 3 mutants: x <= y, x != y, false\n+    /// RelationalOperatorReplacement(`<` |==> `!=`) of: `return x < y;`\n     function less(uint256 x, uint256 y) public pure returns (bool) {\n-        return x < y;\n+        return x != y;\n     }\n \n     // Expect 3 mutants: x < y, x == y, true\n",
    "id": "2",
    "name": "mutants/2/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -5,8 +5,9 @@\n // This contract provides test functions for relational operator replacement (ROR)\n contract ROR {\n     // Expect 3 mutants: x <= y, x != y, false\n+    /// RelationalOperatorReplacement(`x < y` |==> `false`) of: `return x < y;`\n     function less(uint256 x, uint256 y) public pure returns (bool) {\n-        return x < y;\n+        return false;\n     }\n \n     // Expect 3 mutants: x < y, x == y, true\n",
    "id": "3",
    "name": "mutants/3/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -10,8 +10,9 @@\n     }\n \n     // Expect 3 mutants: x < y, x == y, true\n+    /// RelationalOperatorReplacement(`<=` |==> `<`) of: `return x <= y;`\n     function less_equal(uint256 x, uint256 y) public pure returns (bool) {\n-        return x <= y;\n+        return x < y;\n     }\n \n     // Expect 3 mutants: x >= y, x != y, false\n",
    "id": "4",
    "name": "mutants/4/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -10,8 +10,9 @@\n     }\n \n     // Expect 3 mutants: x < y, x == y, true\n+    /// RelationalOperatorReplacement(`<=` |==> `==`) of: `return x <= y;`\n     function less_equal(uint256 x, uint256 y) public pure returns (bool) {\n-        return x <= y;\n+        return x == y;\n     }\n \n     // Expect 3 mutants: x >= y, x != y, false\n",
    "id": "5",
    "name": "mutants/5/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -10,8 +10,9 @@\n     }\n \n     // Expect 3 mutants: x < y, x == y, true\n+    /// RelationalOperatorReplacement(`x <= y` |==> `true`) of: `return x <= y;`\n     function less_equal(uint256 x, uint256 y) public pure returns (bool) {\n-        return x <= y;\n+        return true;\n     }\n \n     // Expect 3 mutants: x >= y, x != y, false\n",
    "id": "6",
    "name": "mutants/6/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -15,8 +15,9 @@\n     }\n \n     // Expect 3 mutants: x >= y, x != y, false\n+    /// RelationalOperatorReplacement(`>` |==> `>=`) of: `return x > y;`\n     function more(uint256 x, uint256 y) public pure returns (bool) {\n-        return x > y;\n+        return x >= y;\n     }\n \n     // Expect 3 mutants: x > y, x == y, true\n",
    "id": "7",
    "name": "mutants/7/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -15,8 +15,9 @@\n     }\n \n     // Expect 3 mutants: x >= y, x != y, false\n+    /// RelationalOperatorReplacement(`>` |==> `!=`) of: `return x > y;`\n     function more(uint256 x, uint256 y) public pure returns (bool) {\n-        return x > y;\n+        return x != y;\n     }\n \n     // Expect 3 mutants: x > y, x == y, true\n",
    "id": "8",
    "name": "mutants/8/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -15,8 +15,9 @@\n     }\n \n     // Expect 3 mutants: x >= y, x != y, false\n+    /// RelationalOperatorReplacement(`x > y` |==> `false`) of: `return x > y;`\n     function more(uint256 x, uint256 y) public pure returns (bool) {\n-        return x > y;\n+        return false;\n     }\n \n     // Expect 3 mutants: x > y, x == y, true\n",
    "id": "9",
    "name": "mutants/9/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     // Expect 3 mutants: x > y, x == y, true\n+    /// RelationalOperatorReplacement(`>=` |==> `>`) of: `return x >= y;`\n     function more_equal(uint256 x, uint256 y) public pure returns (bool) {\n-        return x >= y;\n+        return x > y;\n     }\n \n     // Expect 3 mutants: x >= y, x <= y, false\n",
    "id": "10",
    "name": "mutants/10/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     // Expect 3 mutants: x > y, x == y, true\n+    /// RelationalOperatorReplacement(`>=` |==> `==`) of: `return x >= y;`\n     function more_equal(uint256 x, uint256 y) public pure returns (bool) {\n-        return x >= y;\n+        return x == y;\n     }\n \n     // Expect 3 mutants: x >= y, x <= y, false\n",
    "id": "11",
    "name": "mutants/11/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -20,8 +20,9 @@\n     }\n \n     // Expect 3 mutants: x > y, x == y, true\n+    /// RelationalOperatorReplacement(`x >= y` |==> `true`) of: `return x >= y;`\n     function more_equal(uint256 x, uint256 y) public pure returns (bool) {\n-        return x >= y;\n+        return true;\n     }\n \n     // Expect 3 mutants: x >= y, x <= y, false\n",
    "id": "12",
    "name": "mutants/12/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -25,8 +25,9 @@\n     }\n \n     // Expect 3 mutants: x >= y, x <= y, false\n+    /// RelationalOperatorReplacement(`==` |==> `<=`) of: `return x == y;`\n     function equal_ord(uint256 x, uint256 y) public pure returns (bool) {\n-        return x == y;\n+        return x <= y;\n     }\n \n     // Expect 2 mutants: true, false\n",
    "id": "13",
    "name": "mutants/13/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -25,8 +25,9 @@\n     }\n \n     // Expect 3 mutants: x >= y, x <= y, false\n+    /// RelationalOperatorReplacement(`==` |==> `>=`) of: `return x == y;`\n     function equal_ord(uint256 x, uint256 y) public pure returns (bool) {\n-        return x == y;\n+        return x >= y;\n     }\n \n     // Expect 2 mutants: true, false\n",
    "id": "14",
    "name": "mutants/14/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -25,8 +25,9 @@\n     }\n \n     // Expect 3 mutants: x >= y, x <= y, false\n+    /// RelationalOperatorReplacement(`x == y` |==> `false`) of: `return x == y;`\n     function equal_ord(uint256 x, uint256 y) public pure returns (bool) {\n-        return x == y;\n+        return false;\n     }\n \n     // Expect 2 mutants: true, false\n",
    "id": "15",
    "name": "mutants/15/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -30,8 +30,9 @@\n     }\n \n     // Expect 2 mutants: true, false\n+    /// RelationalOperatorReplacement(`x == y` |==> `true`) of: `return x == y;`\n     function equal_not_ord(bool x, bool y) public pure returns (bool) {\n-        return x == y;\n+        return true;\n     }\n \n     // Expect 3 mutants: x > y, x < y, true\n",
    "id": "16",
    "name": "mutants/16/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -30,8 +30,9 @@\n     }\n \n     // Expect 2 mutants: true, false\n+    /// RelationalOperatorReplacement(`x == y` |==> `false`) of: `return x == y;`\n     function equal_not_ord(bool x, bool y) public pure returns (bool) {\n-        return x == y;\n+        return false;\n     }\n \n     // Expect 3 mutants: x > y, x < y, true\n",
    "id": "17",
    "name": "mutants/17/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -35,8 +35,9 @@\n     }\n \n     // Expect 3 mutants: x > y, x < y, true\n+    /// RelationalOperatorReplacement(`!=` |==> `<`) of: `return x != y;`\n     function not_equal_ord(uint256 x, uint256 y) public pure returns (bool) {\n-        return x != y;\n+        return x < y;\n     }\n \n     // Expect 2 mutants: true, false\n",
    "id": "18",
    "name": "mutants/18/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -35,8 +35,9 @@\n     }\n \n     // Expect 3 mutants: x > y, x < y, true\n+    /// RelationalOperatorReplacement(`!=` |==> `>`) of: `return x != y;`\n     function not_equal_ord(uint256 x, uint256 y) public pure returns (bool) {\n-        return x != y;\n+        return x > y;\n     }\n \n     // Expect 2 mutants: true, false\n",
    "id": "19",
    "name": "mutants/19/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -35,8 +35,9 @@\n     }\n \n     // Expect 3 mutants: x > y, x < y, true\n+    /// RelationalOperatorReplacement(`x != y` |==> `true`) of: `return x != y;`\n     function not_equal_ord(uint256 x, uint256 y) public pure returns (bool) {\n-        return x != y;\n+        return true;\n     }\n \n     // Expect 2 mutants: true, false\n",
    "id": "20",
    "name": "mutants/20/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -40,8 +40,9 @@\n     }\n \n     // Expect 2 mutants: true, false\n+    /// RelationalOperatorReplacement(`x != y` |==> `true`) of: `return x != y;`\n     function not_equal_not_ord(bool x, bool y) public pure returns (bool) {\n-        return x != y;\n+        return true;\n     }\n \n     // Expect 3 mutants: (x + y) > z, (x + y) == z, true\n",
    "id": "21",
    "name": "mutants/21/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -40,8 +40,9 @@\n     }\n \n     // Expect 2 mutants: true, false\n+    /// RelationalOperatorReplacement(`x != y` |==> `false`) of: `return x != y;`\n     function not_equal_not_ord(bool x, bool y) public pure returns (bool) {\n-        return x != y;\n+        return false;\n     }\n \n     // Expect 3 mutants: (x + y) > z, (x + y) == z, true\n",
    "id": "22",
    "name": "mutants/22/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -49,8 +49,9 @@\n         uint256 x,\n         uint256 y,\n         uint256 z\n+    /// RelationalOperatorReplacement(`>=` |==> `>`) of: `return (x + y) >= z;`\n     ) public pure returns (bool) {\n-        return (x + y) >= z;\n+        return (x + y) > z;\n     }\n \n     // Expect 3 mutants: (x + y) > z, (x + y) < z, true\n",
    "id": "23",
    "name": "mutants/23/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -49,8 +49,9 @@\n         uint256 x,\n         uint256 y,\n         uint256 z\n+    /// RelationalOperatorReplacement(`>=` |==> `==`) of: `return (x + y) >= z;`\n     ) public pure returns (bool) {\n-        return (x + y) >= z;\n+        return (x + y) == z;\n     }\n \n     // Expect 3 mutants: (x + y) > z, (x + y) < z, true\n",
    "id": "24",
    "name": "mutants/24/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -49,8 +49,9 @@\n         uint256 x,\n         uint256 y,\n         uint256 z\n+    /// RelationalOperatorReplacement(`(x + y) >= z` |==> `true`) of: `return (x + y) >= z;`\n     ) public pure returns (bool) {\n-        return (x + y) >= z;\n+        return true;\n     }\n \n     // Expect 3 mutants: (x + y) > z, (x + y) < z, true\n",
    "id": "25",
    "name": "mutants/25/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -58,7 +58,8 @@\n         uint256 x,\n         uint256 y,\n         uint256 z\n+    /// RelationalOperatorReplacement(`!=` |==> `<`) of: `return (x + y) != z;`\n     ) public pure returns (bool) {\n-        return (x + y) != z;\n+        return (x + y) < z;\n     }\n }\n",
    "id": "26",
    "name": "mutants/26/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -58,7 +58,8 @@\n         uint256 x,\n         uint256 y,\n         uint256 z\n+    /// RelationalOperatorReplacement(`!=` |==> `>`) of: `return (x + y) != z;`\n     ) public pure returns (bool) {\n-        return (x + y) != z;\n+        return (x + y) > z;\n     }\n }\n",
    "id": "27",
    "name": "mutants/27/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  },
  {
    "description": "RelationalOperatorReplacement",
    "diff": "--- original\n+++ mutant\n@@ -58,7 +58,8 @@\n         uint256 x,\n         uint256 y,\n         uint256 z\n+    /// RelationalOperatorReplacement(`(x + y) != z` |==> `true`) of: `return (x + y) != z;`\n     ) public pure returns (bool) {\n-        return (x + y) != z;\n+        return true;\n     }\n }\n",
    "id": "28",
    "name": "mutants/28/Ops/ROR/ROR.sol",
    "original": "/Users/benku/Gambit/benchmarks/Ops/ROR/ROR.sol"
  }
]