[
  {
    "col": 24,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -11,8 +11,9 @@\n     int256 zero_s = 0;\n \n     // Expect 1 mutant: 1\n+    /// LiteralValueReplacement(`0` |==> `1`) of: `uint256 zero = 0;`\n     function unsigned_zero() public pure returns (uint256) {\n-        uint256 zero = 0;\n+        uint256 zero = 1;\n         return zero;\n     }\n \n",
    "id": "1",
    "line": 15,
    "name": "mutants/1/Ops/LVR/LVR.sol",
    "op": "LVR",
    "orig": "0",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LVR/LVR.sol",
    "repl": "1"
  },
  {
    "col": 23,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -17,8 +17,9 @@\n     }\n \n     // Expect 2 mutant: 0, 2\n+    /// LiteralValueReplacement(`1` |==> `0`) of: `uint256 one = 1;`\n     function unsigned_one() public pure returns (uint256) {\n-        uint256 one = 1;\n+        uint256 one = 0;\n         return one;\n     }\n \n",
    "id": "2",
    "line": 21,
    "name": "mutants/2/Ops/LVR/LVR.sol",
    "op": "LVR",
    "orig": "1",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LVR/LVR.sol",
    "repl": "0"
  },
  {
    "col": 23,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -17,8 +17,9 @@\n     }\n \n     // Expect 2 mutant: 0, 2\n+    /// LiteralValueReplacement(`1` |==> `2`) of: `uint256 one = 1;`\n     function unsigned_one() public pure returns (uint256) {\n-        uint256 one = 1;\n+        uint256 one = 2;\n         return one;\n     }\n \n",
    "id": "3",
    "line": 21,
    "name": "mutants/3/Ops/LVR/LVR.sol",
    "op": "LVR",
    "orig": "1",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LVR/LVR.sol",
    "repl": "2"
  },
  {
    "col": 26,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -23,8 +23,9 @@\n     }\n \n     // Expect 2 mutants: 0, 1\n+    /// LiteralValueReplacement(`-1` |==> `0`) of: `int256 neg_one = -1;`\n     function signed_neg_one() public pure returns (int256) {\n-        int256 neg_one = -1;\n+        int256 neg_one = 0;\n         return neg_one;\n     }\n \n",
    "id": "4",
    "line": 27,
    "name": "mutants/4/Ops/LVR/LVR.sol",
    "op": "LVR",
    "orig": "-1",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LVR/LVR.sol",
    "repl": "0"
  },
  {
    "col": 26,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -23,8 +23,9 @@\n     }\n \n     // Expect 2 mutants: 0, 1\n+    /// LiteralValueReplacement(`-1` |==> `1`) of: `int256 neg_one = -1;`\n     function signed_neg_one() public pure returns (int256) {\n-        int256 neg_one = -1;\n+        int256 neg_one = 1;\n         return neg_one;\n     }\n \n",
    "id": "5",
    "line": 27,
    "name": "mutants/5/Ops/LVR/LVR.sol",
    "op": "LVR",
    "orig": "-1",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LVR/LVR.sol",
    "repl": "1"
  },
  {
    "col": 26,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -23,8 +23,9 @@\n     }\n \n     // Expect 2 mutants: 0, 1\n+    /// LiteralValueReplacement(`-1` |==> `-2`) of: `int256 neg_one = -1;`\n     function signed_neg_one() public pure returns (int256) {\n-        int256 neg_one = -1;\n+        int256 neg_one = -2;\n         return neg_one;\n     }\n \n",
    "id": "6",
    "line": 27,
    "name": "mutants/6/Ops/LVR/LVR.sol",
    "op": "LVR",
    "orig": "-1",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LVR/LVR.sol",
    "repl": "-2"
  },
  {
    "col": 26,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -29,8 +29,9 @@\n     }\n \n     // Expect 2 mutants: -1, 0\n+    /// LiteralValueReplacement(`1` |==> `0`) of: `int256 pos_one = 1;`\n     function signed_pos_one() public pure returns (int256) {\n-        int256 pos_one = 1;\n+        int256 pos_one = 0;\n         return pos_one;\n     }\n \n",
    "id": "7",
    "line": 33,
    "name": "mutants/7/Ops/LVR/LVR.sol",
    "op": "LVR",
    "orig": "1",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LVR/LVR.sol",
    "repl": "0"
  },
  {
    "col": 26,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -29,8 +29,9 @@\n     }\n \n     // Expect 2 mutants: -1, 0\n+    /// LiteralValueReplacement(`1` |==> `-1`) of: `int256 pos_one = 1;`\n     function signed_pos_one() public pure returns (int256) {\n-        int256 pos_one = 1;\n+        int256 pos_one = -1;\n         return pos_one;\n     }\n \n",
    "id": "8",
    "line": 33,
    "name": "mutants/8/Ops/LVR/LVR.sol",
    "op": "LVR",
    "orig": "1",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LVR/LVR.sol",
    "repl": "-1"
  },
  {
    "col": 26,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -29,8 +29,9 @@\n     }\n \n     // Expect 2 mutants: -1, 0\n+    /// LiteralValueReplacement(`1` |==> `2`) of: `int256 pos_one = 1;`\n     function signed_pos_one() public pure returns (int256) {\n-        int256 pos_one = 1;\n+        int256 pos_one = 2;\n         return pos_one;\n     }\n \n",
    "id": "9",
    "line": 33,
    "name": "mutants/9/Ops/LVR/LVR.sol",
    "op": "LVR",
    "orig": "1",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LVR/LVR.sol",
    "repl": "2"
  },
  {
    "col": 23,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -35,8 +35,9 @@\n     }\n \n     // Expect 2 mutants: -1, 1\n+    /// LiteralValueReplacement(`0` |==> `-1`) of: `int256 zero = 0;`\n     function signed_zero() public pure returns (int256) {\n-        int256 zero = 0;\n+        int256 zero = -1;\n         return zero;\n     }\n }\n",
    "id": "10",
    "line": 39,
    "name": "mutants/10/Ops/LVR/LVR.sol",
    "op": "LVR",
    "orig": "0",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LVR/LVR.sol",
    "repl": "-1"
  },
  {
    "col": 23,
    "description": "LiteralValueReplacement",
    "diff": "--- original\n+++ mutant\n@@ -35,8 +35,9 @@\n     }\n \n     // Expect 2 mutants: -1, 1\n+    /// LiteralValueReplacement(`0` |==> `1`) of: `int256 zero = 0;`\n     function signed_zero() public pure returns (int256) {\n-        int256 zero = 0;\n+        int256 zero = 1;\n         return zero;\n     }\n }\n",
    "id": "11",
    "line": 39,
    "name": "mutants/11/Ops/LVR/LVR.sol",
    "op": "LVR",
    "orig": "0",
    "original": "/Users/benku/Gambit/benchmarks/Ops/LVR/LVR.sol",
    "repl": "1"
  }
]