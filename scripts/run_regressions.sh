#!/bin/bash

################################################################################
# run_regressions.sh
#
# Overview
# ========
#
# This script iterates through all conf files in `benchmarks/config-jsons`, runs
# Gambit on them, and compares the output directory to the regression results
# stored in `resources/regressions` named after the configuration json
# (generated by make_regressions.sh).
#
# Usage
# -----
#
# This script takes no arguments. It determines paths to all input files (i.e.,
# files in `benchmarks/config-jsons`) and regression locations (i.e.,
# `resources/regressions/XXXXX`) relative to this script's parent directory.

SCRIPTS=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
green_check=""
red_x=""
# shellcheck disable=SC1091
source "$SCRIPTS/util.sh"
GAMBIT="$(cd "$SCRIPTS"/.. && pwd)"
GAMBIT_EXECUTABLE="$GAMBIT/target/release/gambit"
CONFIGS="$GAMBIT/benchmarks/config-jsons"
REGRESSIONS="$GAMBIT"/resources/regressions
TMP_REGRESSIONS="$GAMBIT"/resources/tmp_regressions

NUM_CONFIGS=$(ls "$CONFIGS" | wc -l | xargs)

passed=()
failed=()

print_vars() {
    echo "scripts: $SCRIPTS"
    echo "gambit: $GAMBIT"
    echo "configs: $CONFIGS"
    echo "regressions: $REGRESSIONS"
    echo "temporary regressions: $TMP_REGRESSIONS"
}

build_release() {
    old_dir=$(pwd)
    cd "$GAMBIT" || exit 1
    cargo build --release

    cd "$old_dir" || exit 1
}

run_regressions() {
    echo "Running regression tests on $NUM_CONFIGS configurations"

    starting_dir=$(pwd)
    cd "$GAMBIT" || {
        echo "Error: couldn't cd $GAMBIT"
        exit 1
    }

    conf_idx=0

    for conf_path in "$CONFIGS"/*; do
        conf_idx=$((conf_idx + 1))
        echo
        echo
        printf "\033[1mConfiguration %s/%s:\033[0m %s\n" "$conf_idx" "$NUM_CONFIGS" "$(basename "$conf_path")"

        conf=$(basename "$conf_path")
        regression_dir="$REGRESSIONS"/"$conf"

        # Get relative paths for nice printing
        rel_conf_path=$(python -c "import os.path; print( os.path.relpath('$conf_path', '$(pwd)'))")
        rel_regression_dir=$(python -c "import os.path; print( os.path.relpath('$regression_dir', '$(pwd)'))")


        printf "  %s \033[1mRunning:\033[0m %s\n" "$green_check" "gambit mutate --json $rel_conf_path"
        stdout="$("$GAMBIT_EXECUTABLE" mutate --json "$conf_path")"
        printf "  %s \033[1mGambit Output:\033[0m '\033[3m%s\033[0m'\n" "$green_check" "$stdout"
        if diff -q -r gambit_out "$regression_dir" 1>/dev/null; then
            printf "  %s \033[1mDiffed:\033[0m gambit_out and %s\n" "$green_check" "$rel_regression_dir"
            printf "  %s No regressions in %s\n" "$green_check" "$conf"
            passed+=("$conf")
        else
            printf "  %s \033[1mDiffed:\033[0m gambit_out and %s\n" "$red_x" "$rel_regression_dir"
            diff -r gambit_out/mutants "$regression_dir"/mutants
            printf "  %s Found a regression in \033[3m%s\033[0m\n" "$red_x" "$conf"
            failed+=("$conf")
        fi
        rm -rf gambit_out

    done

    cd "$starting_dir" || exit 1

}

summary() {

    printf "\n\n\033[96mREGRESSION SUMMARY\033[0m\n"
    printf "\033[96m==================\033[0m\n\n"

    printf "\033[92mPassed:\033[0m %s of %s tests\n" ${#passed[@]} $((${#failed[@]} + ${#passed[@]}))
    printf "\033[92m-------\033[0m\n"

    for conf in "${passed[@]}"; do
        printf "%s %s\n" "$green_check" "$conf"
    done

    printf "\n"

    printf "\033[91mFailed:\033[0m %s of %s tests\n" ${#failed[@]} $((${#failed[@]} + ${#passed[@]}))
    printf "\033[91m-------\033[0m\n"

    for conf in "${failed[@]}"; do
        printf "%s %s\n" "$red_x" "$conf"
    done

}

print_vars
build_release
run_regressions
summary
